# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19bNZOIDaTWScmkoelejw8TtEQgHli7Mz
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from sklearn.model_selection import train_test_split
#from sklearn.preprocesssing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score

data = pd.read_csv(r'/content/sample_data/personal_loan.csv')
data

data.info()

data.isnull().sum()

data['Gender'] =data['Gender'].fillna(data['Gender'].mode()[0])

data['Married'] =data['Married'].fillna(data['Married'].mode()[0])

data['Dependents']=data['Dependents'].str.replace('+','')

data['Dependents']= data['Dependents'].fillna(data['Dependents'].mode()[0])

data['Self_Employed'] = data['Self_Employed'].fillna(data['Self_Employed'].mode()[0])

data['LoanAmount'] = data['LoanAmount'].fillna(data['LoanAmount'].mode()[0])

data['Loan_Amount_Term'] = data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mode()[0])

data['Credit_History'] = data['Credit_History'].fillna(data['Credit_History'].mode()[0])

pd.DataFrame['Gender']=data['Gender'].astype('int64')
data['Married']=data['Married'].astype('int64')
data['Dependents']=data['Dependents'].astype('int64')
data['Self_Employed']=data['Self_Employed'].astype('int64')
data['CoapplicantIncome']=data['CoapplicantIncome'].astype('int64')
data['LoanAmount']=data['LoanAmount'].astype('int64')
data['Loan_Amount_Term']=data['Loan_Amount_Term'].astype('int64')
data['Credit_History']=data['Credit_History'].astype('int64')

df = pd.DataFrame(data, columns=['Gender'])

df['Gender']=df['Gender'].astype('int64')

from imblearn.combine import SMOTETomek

smote = SMOTETomek(0.90)

y=data['Loan_Status']
x=data.drop(column=['Loan_Status'],axis=1)

print(y.value_counts())
print(y_bal.value_counts())

data.describe()

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(data['ApplicantIncome'], color='r')
plt.subplot(122)
sns.distplot(data['Credit_History'])
plt.show()

plt.figure(figsize=(18,4))
plt.subplot(1,4,1)
sns.countplot(data['Gender'])
plt.subplot(1,4,2)
sns.countplot(data['Education'])
plt.show()

plt.figure(figsize=(20,5))
plt.subplot(131)
sns.countplot(data['Married'], hue=data['Married'])
plt.subplot(132)
sns.countplot(data['Self_Employed'], hue=data['Education'])
plt.subplot(133)
sns.countplot(data['Property_Area'], hue=data['Loan_Amount_Term'])

sns.swarmplot(data['Gender'],data['ApplicantIncome'], hue=data['Loan_Status'])

sc=StandardScaler()
x_bal=sc.fit_transform(x_bal)
x_bal= pd.DataFrame(x_bal,columns=names)

X_train, X_test, y_train, y_test= train_test_split(
    x_bal, y_bal, test_size=0.33, random_state=42)

def decisionTree(x_train, x_test, y_train, y_test)
    dt=DecisionTreeClassifier()
    dt.fit(X_train,y_train)
    yPred= dt.predict(x_test)
    print('***DecisionTreeClassifier***')
    print('Confusion matrix')
    print(confusion_matrix(y_test,ypred))
    print('Classification report')
    print(classification_report(y_test,yPred))

def randomForest(x_train, x_test, y_train, y_test) :
  rf = RandomforestClassifier()
  rf.fit(x_train,y_train)
  ypred = rf.predict(x_test)
  print('***RandomForestClassifier***')
  print('confusion matrix')
  print(confusion_matrix(y_test,ypred))
  print('Classification report')
  print(classification_report(y_test,ypred))

def xgboost(x_train, x_test, y_train, y_test) :
  xg = GradientBoostingClassifier()
  xg.fit(x_train,y_train)
  ypred = xg.predict(x_test)
  print('***GradientBoostingClassifier***')
  print('Confusionmatrix')
  print(confusion_matrix(y_test,ypred))
  print('Classification report')
  print(classification_report(y_test,ypred))

import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense